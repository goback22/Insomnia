<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace속성:매퍼파일의 완전한경로 .xml는 생략 -->
<!-- ※ibatis와는 다르게 id값에 .(dot)를 사용 못한다. -->

<mapper namespace="mapper.sgh">

	<!-- 소셜 로그인 -->
	<select id="isSocialMember" parameterType="java.util.Map" resultType="int">
		select count(*) from members where id=#{socialId}
	</select>
	
	<!-- 소셜 회원가입 -->
	<insert id="socialRegister" parameterType="java.util.Map">
		insert into members(id, email, name, gender, profile_img, birthday, join_date, login_chain, phone) 
		values(#{socialId}, #{socialEmail}, #{socialName}, #{socialGender}, #{socialProfile}, #{socialBirth}, sysdate, #{socialSite}, 010)
	</insert>
	
	<!-- 소셜 추가정보 입력 -->
	<update id="update_social" parameterType="java.util.Map">
		update members set email=#{email}, zip_code=#{zip_code}, shipping_address=#{address}, phone=#{phone}, birthday=#{birthday} WHERE id=#{id}
	
	</update>
	
	<!-- 회원 1인의 정보 갖고오기 -->
	<select id="selectOne_Member" parameterType="java.util.Map" resultType="MemberDTO">
		select * from members where id=#{id}
	</select>
	
	<!-- 회원의 프로필 사진을 등록/수정 -->
	<update id="update_Profile" parameterType="java.util.Map">
		update members set profile_img = #{profile_img} where id = #{id}
	</update>
	
	<!-- ======================================================================================================= -->
	
	<!-- 전체 리워드의 수 구하기 : 추후 사용? -->
	<select id="getTotalCount_reward" parameterType="java.util.Map" resultType="int">
		select count(*) from reward
	</select>
	
	<!-- 마이페이지에서 펀딩한 리워드 목록 가져오기 --> 
	<!-- <select id="selectList_reward" parameterType="java.util.Map" resultType="RewardDTO">

		select * from (select t.*, rownum r from (select r_no, r_price, r_name, s_no, r_description, b_name, bm_name, sw_banner from (select r.*, bm_name, b_name, sw_banner from reward r join safepay s on r.r_no = s.r_no
		join bandsubmit bs on bs.s_no = r.s_no
		join bandsubmitwaiting bsw on bsw.sw_no = bs.sw_no
		join band b on b.b_no = bs.b_no
		join bandmusic bm on bm.b_no = b.b_no
		
        where id = #{id}
        )) t) where r between #{start} and #{end}
	</select> -->
	
	<!-- 마이페이지에서 펀딩한 리워드 목록 가져오기 : ajax --> 
	<select id="selectList_reward" parameterType="java.util.Map" resultType="RewardDTO">

		select r.r_no, r_price, r_name, r.s_no, r_description, b_name, bm_name, sw_banner from reward r join safepay s on r.r_no = s.r_no
		join bandsubmit bs on bs.s_no = r.s_no
		join bandsubmitwaiting bsw on bsw.sw_no = bs.sw_no
		join band b on b.b_no = bs.b_no
		join bandmusic bm on bm.b_no = b.b_no
        where id = #{id}
	</select>
	
	
	<!-- 마이페이지 리워드, 페이징 위한 갯수 구하기 -->  <!-- 수정해야 -->
	<select id="getCount_reward" parameterType="java.util.Map" resultType="int">

	  select count(*) from (select r.*, bm_name , b_name from reward r join safepay s on r.r_no = s.r_no
		join bandsubmit bs on bs.s_no = r.s_no
		join band b on b.b_no = bs.b_no
		join bandmusic bm on bm.b_no = b.b_no
        where id = #{id})
	</select>
	
	
	<!-- 마이페이지에서 방구석 기타리스트 목록 가져오기 -->
	<!-- <select id="selectMyList_bgsconcert" parameterType="java.util.Map" resultType="BGSConcertDTO">
		select * from (select t.*, rownum r from (select c.*, c_concertDate, c_price, qty from bgsconcert c join concerttimes t on c.bgsco_no = t.bgsco_no
		join bgspay p on p.ct_no = t.ct_no
		where id = #{id}
		) t) where r between #{start} and #{end}
	</select> -->
	
	<!-- 마이페이지에서 방구석 기타리스트 목록 가져오기 : ajax -->
	<select id="selectMyList_bgsconcert" parameterType="java.util.Map" resultType="BGSConcertDTO">
		select c.*, c_concertDate, c_price, qty from bgsconcert c join concerttimes t on c.bgsco_no = t.bgsco_no
		join bgspay p on p.ct_no = t.ct_no
		where id = #{id}
	</select>
	
	
	<!-- 마이페이지 방구석 페이징 위한 갯수 구하기  -->
	<select id="getCount_bgsconcert" parameterType="java.util.Map" resultType="int">
		select count(*) from (select t.* from (select c.*, c_concertDate, c_price, qty from bgsconcert c join concerttimes t on c.bgsco_no = t.bgsco_no
		join bgspay p on p.ct_no = t.ct_no
		where id = #{id}) t)
	</select>
	
	<insert id="like_follow_insert" parameterType="java.util.Map">
		insert into favorite values(seq_favorite.nextval, #{id}, #{b_no}, #{choice})
	</insert>
	
	<delete id="like_follow_delete" parameterType="java.util.Map">
		delete favorite where id=#{id} and choice=#{choice} and b_no=#{b_no}
	</delete>
	
	<select id="getLikeNFollow" parameterType="java.util.Map" resultType="int">
		select count(*) from favorite where id=#{id} and choice=#{choice}
	</select>
	
	<select id="getBandLikeNFollow" parameterType="java.util.Map" resultType="int">
		select count(*) from favorite where b_no=#{b_no} and choice=#{choice}
	</select>
	
	<!-- 좋아요 페이징 -->
	<select id="getLikeBand" parameterType="java.util.Map" resultType="BandDTO">	
		select b.b_no, b_name, b_description, b_album_cover
		from band b join favorite f on b.b_no = f.b_no 
		where id=#{id} and choice=#{choice}
	</select>
	
	<select id="getLikeBand2" parameterType="java.util.Map" resultType="BandDTO">	
		select b.b_no, b_name, b_description, b_album_cover, bm_name
		from band b join favorite f on b.b_no = f.b_no 
		join bandmusic bm on b.b_no = bm.b_no
		where id=#{id} and choice=#{choice}
	</select>
	<!-- <select id="getLikeBand" parameterType="java.util.Map" resultType="BandDTO">	
		select * from (select t.*, rownum as r from (select b.b_no, b_name, b_description, b_album_cover, bm_name
		from band b join favorite f on b.b_no = f.b_no 
		join bandmusic bm on b.b_no = bm.b_no
		where id=#{id} and choice=#{choice}) t) where r between #{start} and #{end}
	</select> -->
	
	<!-- 좋아요 페이징 : ajax -->
	<select id="doesBandRegisterMusic" parameterType="java.util.Map" resultType="int">
		select count(*) from band b join bandmusic bm on b.b_no = bm.b_no 
		join favorite f on f.b_no = b.b_no 
		where id=#{id} 
	</select>
	
	<!-- 
	<select id="getLikeBand" parameterType="java.util.Map" resultType="BandDTO">	
		select b.b_no, b_name, b_description, b_album_cover, bm_name
		from band b join favorite f on b.b_no = f.b_no 
		join bandmusic bm on b.b_no = bm.b_no
		where id=#{id} and choice=#{choice}
	</select>
	 -->
	
	<select id="distinguishLike" parameterType="java.util.Map" resultType="int">
		select count(*) from favorite where id=#{id} and choice=#{choice} and b_no = #{b_no}
	</select>
	
	<update id="member_update" parameterType="java.util.Map">
		update members set password = #{password}, email=#{email}, phone = #{phone}, shipping_address = #{shipping_address} where id = #{id}
	</update>
	
	<update id="changepassword" parameterType="java.util.Map">
		update members set password = #{password} where id = #{id}
	</update>
	
	<select id="getIdByEmail" parameterType="java.util.Map" resultType="MemberDTO">
		select * from members where email = #{thisEmail}
	</select>
	
	<select id="selectList_Android_Funding" resultType="java.util.Map">
		select c.ct_name,b.b_album_cover,b_name,b_description,bs.s_goal_accumulation,bs.s_goal_price,bs.s_goal_deadline 
		from band b 
		join category c on C.ct_no = b.ct_no 
		join bandsubmit bs on b.b_no = bs.b_no 
		order by s_goal_deadline
	</select>
	
	<select id="selectList_Android_Funding2" resultType="java.util.Map">
		select c.ct_no,c.ct_name,b_album_cover,b_name,b_description,bs.s_goal_accumulation,bs.s_goal_price,bs.s_goal_deadline 
		from band b 
		join category c on C.ct_no = b.ct_no 
		join bandsubmit bs on b.b_no = bs.b_no 
		order by s_goal_deadline
	</select>
	
	<select id="selectAndroidReward2" parameterType="java.util.Map" resultType="java.util.Map">
		select c.ct_name, b_album_cover, b_name, b_description, bs.s_goal_accumulation, bs.s_goal_price, bs.s_goal_deadline,
		round(bs.s_goal_accumulation/bs.s_goal_price, 2) as rate
		from band b 
		join category c on C.ct_no = b.ct_no 
		join bandsubmit bs on b.b_no = bs.b_no 
		order by rate desc
	</select>
	
	
	
	
	
</mapper>
